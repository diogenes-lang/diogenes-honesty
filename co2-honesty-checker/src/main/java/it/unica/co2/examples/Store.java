package it.unica.co2.examples;



import static it.unica.co2.api.contract.utils.ContractFactory.*;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import co2api.ContractExpiredException;
import co2api.Message;
import co2api.Public;
import co2api.Session;
import co2api.TST;
import co2api.TimeExpiredException;
import it.unica.co2.api.contract.ContractDefinition;
import it.unica.co2.api.contract.Sort;
import it.unica.co2.api.process.Participant;
import it.unica.co2.api.process.SkipMethod;
import it.unica.co2.honesty.HonestyChecker;

/*
 * auto-generated by co2-plugin
 * creation date: 17-02-2016 12:00:36
 */

@SuppressWarnings("unused")
public class Store {
	
	private static String username = "test@co2-plugin.com";
	private static String password = "test";
	
	
	/*
	 * contracts declaration
	 */
	private static ContractDefinition C = def("C");
	private static ContractDefinition D = def("D");
	
	/*
	 * contracts initialization
	 */
	static {
		C.setContract(externalSum().add("order", Sort.string(), internalSum().add("amount", Sort.integer()).add("abort", Sort.unit())));
		D.setContract(internalSum().add("req", Sort.string(), externalSum().add("ok", Sort.unit()).add("no", Sort.unit())));
	}
	
	public static class Pdishonest extends Participant {
		
		private static final long serialVersionUID = 1L;
		
		public Pdishonest() {
			super(Store.username, Store.password);
		}
		
		@Override
		public void run() {
			Session<TST> x = tellAndWait(C);
			
			System.out.println("waiting on 'x' for actions [order]");
			Message msg = x.waitForReceive("order");
			
			System.out.println("received [order]");
			String v;
			v = msg.getStringValue();
			Session<TST> y = tellAndWait(D);
			
			y.sendIfAllowed("req", v);
			try {
				System.out.println("waiting on 'y' for actions [ok, no]");
				Message msg_1 = y.waitForReceive(10000, "ok", "no");
				
				switch (msg_1.getLabel()) {			
					
					case "ok":
						System.out.println("received [ok]");
						x.sendIfAllowed("amount", 100);
						break;
					
					case "no":
						System.out.println("received [no]");
						x.sendIfAllowed("abort");
						break;
					
				}
			}
			catch (TimeExpiredException e) {
				x.sendIfAllowed("abort");
			}
			
		}
	}
	
	public static class Phonest extends Participant {
		
		private static final long serialVersionUID = 1L;
		
		public Phonest() {
			super(Store.username, Store.password);
		}
		
		@Override
		public void run() {
			Session<TST> x = tellAndWait(C);
			
			System.out.println("waiting on 'x' for actions [order]");
			Message msg = x.waitForReceive("order");
			
			System.out.println("received [order]");
			String v;
			v = msg.getStringValue();
			Public<TST> pbl_y = tell(D, 10000);
			
			try {
				Session<TST> y = pbl_y.waitForSession();
				
				y.sendIfAllowed("req", v);
				try {
					System.out.println("waiting on 'y' for actions [ok, no]");
					Message msg_1 = y.waitForReceive(10000, "ok", "no");
					
					switch (msg_1.getLabel()) {			
						
						case "ok":
							System.out.println("received [ok]");
							try {
								x.sendIfAllowed("amount", getOrderAmount(v));
							}
							catch(RuntimeException e) {
								x.sendIfAllowed("abort");
							}
							break;
						
						case "no":
							System.out.println("received [no]");
							x.sendIfAllowed("abort");
							break;
						
					}
				}
				catch (TimeExpiredException e) {
					x.sendIfAllowed("abort");
					System.out.println("waiting on 'y' for actions [ok, no]");
					Message msg_2 = y.waitForReceive("ok", "no");
					
					switch (msg_2.getLabel()) {			
						
						case "ok":
							System.out.println("received [ok]");
							break;
						
						case "no":
							System.out.println("received [no]");
							break;
						
					}
				}
				
			}
			catch(ContractExpiredException e) {
				//retract y
				x.sendIfAllowed("abort");
			}
		}
		
		@SkipMethod("100")
		public int getOrderAmount(String order) throws RuntimeException{
			File f = new File("/orders/"+order);
			
			try (
					BufferedReader br = new BufferedReader( new FileReader(f) )
					) {
				
				String firstLine = br.readLine();
				return Integer.valueOf(firstLine);		
			}
			catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
	}
	
	public static void main(String[] args) {
		HonestyChecker.isHonest(Phonest.class);
	}
}

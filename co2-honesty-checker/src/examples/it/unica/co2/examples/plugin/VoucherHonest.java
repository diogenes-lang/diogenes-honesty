package it.unica.co2.examples.plugin;



import static it.unica.co2.model.ContractFactory.*;
import it.unica.co2.api.Session2;
import it.unica.co2.model.contract.Contract;
import it.unica.co2.model.contract.ContractWrapper;
import it.unica.co2.model.contract.Recursion;
import it.unica.co2.model.contract.Sort;
import it.unica.co2.model.process.CO2Process;
import it.unica.co2.model.process.Participant;
import co2api.ContractException;
import co2api.Message;
import co2api.Public;
import co2api.TST;
import co2api.TimeExpiredException;

/*
 * auto-generated by co2-plugin
 * creation date: 04-09-2015 00:12:16
 */

@SuppressWarnings("unused")
public class VoucherHonest {
	
	private static String username = "test@co2-plugin.com";
	private static String password = "test";
	
	
	/*
	 * contracts declaration
	 */
	private static ContractWrapper CB = wrapper();
	private static ContractWrapper CV = wrapper();
	
	/*
	 * contracts initialization
	 */
	static {
		CB.setContract(externalSum().add("clickPay", Sort.UNIT, externalSum().add("pay", Sort.STRING)).add("clickVoucher", Sort.UNIT, internalSum().add("reject", Sort.UNIT, externalSum().add("pay", Sort.STRING)).add("accept", Sort.UNIT, externalSum().add("voucher", Sort.STRING))));
		CV.setContract(externalSum().add("ok", Sort.UNIT).add("no", Sort.UNIT));
	}
	
	public static class P extends Participant {
		
		private static final long serialVersionUID = 1L;
		
		public P() {
			super(username, password);
		}
		
		@Override
		public void run() {
			Session2<TST> x;
			
			Public<TST> _pbl_x_CB = tell(CB);
			x = waitForSession(_pbl_x_CB);
			
			
			
			logger.log("waiting on 'x' for actions [clickPay,clickVoucher]");
			Message _msg_x_0 = x.waitForReceive("clickPay","clickVoucher");
				
			switch (_msg_x_0.getLabel()) {
				
				case "clickPay":
					
					logger.log("waiting on 'x' for actions [pay]");
					Message _msg_x_1 = x.waitForReceive("pay");
						
					switch (_msg_x_1.getLabel()) {
						
						case "pay":
							String code_0;
							try {
								code_0 = _msg_x_1.getStringValue();
							}
							catch (ContractException e) {
								throw new RuntimeException(e);
							}
							break;
						
						default:
							throw new IllegalStateException("You should not be here");
					}
					
					break;
				case "clickVoucher":
					new Q(x).run();
					break;
				
				default:
					throw new IllegalStateException("You should not be here");
			}
			
		}
	}
	
	public static class Q extends Participant {
		
		private static final long serialVersionUID = 1L;
		private Session2<TST> x;
		
		public Q(Session2<TST> x) {
			super(username, password);
			this.x=x;
		}
		
		@Override
		public void run() {
			Session2<TST> y;
			
			Public<TST> _pbl_y_CV = tell(CV);
			
			try {
				y = waitForSession(_pbl_y_CV, 10000);
				new Q1(x,y).run();
			}
			catch(TimeExpiredException e) {
				
				parallel(()->{
					
					new abortX(x).run();
				});
				
				parallel(()->{
					
					Session2<TST> yy = waitForSession(_pbl_y_CV);
					new abortY(yy).run();
				});
			}
		}
	}
	
	public static class Q1 extends Participant {
		
		private static final long serialVersionUID = 1L;
		private Session2<TST> x;
		private Session2<TST> y;
		
		public Q1(Session2<TST> x,Session2<TST> y) {
			super(username, password);
			this.x=x;
			this.y=y;
		}
		
		@Override
		public void run() {
			
			try {
				
				logger.log("waiting on 'y' for actions [ok,no]");
				Message _msg_y_2 = y.waitForReceive(10000, "ok","no");
					
				switch (_msg_y_2.getLabel()) {
					
					case "ok":
						x.send("accept");
						
						logger.log("waiting on 'x' for actions [voucher]");
						Message _msg_x_3 = x.waitForReceive("voucher");
							
						switch (_msg_x_3.getLabel()) {
							
							case "voucher":
								String v_0;
								try {
									v_0 = _msg_x_3.getStringValue();
								}
								catch (ContractException e) {
									throw new RuntimeException(e);
								}
								break;
							
							default:
								throw new IllegalStateException("You should not be here");
						}
						
						break;
					case "no":
						x.send("reject");
						
						logger.log("waiting on 'x' for actions [pay]");
						Message _msg_x_4 = x.waitForReceive("pay");
							
						switch (_msg_x_4.getLabel()) {
							
							case "pay":
								String code_0;
								try {
									code_0 = _msg_x_4.getStringValue();
								}
								catch (ContractException e) {
									throw new RuntimeException(e);
								}
								break;
							
							default:
								throw new IllegalStateException("You should not be here");
						}
						
						break;
					
					default:
						throw new IllegalStateException("You should not be here");
				}
				
			}
			catch (TimeExpiredException e) {
				new R1(x,y).run();
			}
			
		}
	}
	
	public static class R1 extends Participant {
		
		private static final long serialVersionUID = 1L;
		private Session2<TST> x;
		private Session2<TST> y;
		
		public R1(Session2<TST> x,Session2<TST> y) {
			super(username, password);
			this.x=x;
			this.y=y;
		}
		
		@Override
		public void run() {
			
			parallel(()->{
				
				new abortX(x).run();
			});
			
			parallel(()->{
				
				new abortY(y).run();
			});
		}
	}
	
	public static class abortX extends Participant {
		
		private static final long serialVersionUID = 1L;
		private Session2<TST> x;
		
		public abortX(Session2<TST> x) {
			super(username, password);
			this.x=x;
		}
		
		@Override
		public void run() {
			
			x.send("reject");
			
			logger.log("waiting on 'x' for actions [pay]");
			Message _msg_x_5 = x.waitForReceive("pay");
				
			switch (_msg_x_5.getLabel()) {
				
				case "pay":
					String code_0;
					try {
						code_0 = _msg_x_5.getStringValue();
					}
					catch (ContractException e) {
						throw new RuntimeException(e);
					}
					break;
				
				default:
					throw new IllegalStateException("You should not be here");
			}
			
		}
	}
	
	public static class abortY extends Participant {
		
		private static final long serialVersionUID = 1L;
		private Session2<TST> y;
		
		public abortY(Session2<TST> y) {
			super(username, password);
			this.y=y;
		}
		
		@Override
		public void run() {
			
			
			logger.log("waiting on 'y' for actions [ok,no]");
			Message _msg_y_6 = y.waitForReceive("ok","no");
				
			switch (_msg_y_6.getLabel()) {
				
				case "ok":
					break;
				case "no":
					break;
				
				default:
					throw new IllegalStateException("You should not be here");
			}
			
		}
	}
	
	public static void main(String[] args) {
		new P().run();
	}
}

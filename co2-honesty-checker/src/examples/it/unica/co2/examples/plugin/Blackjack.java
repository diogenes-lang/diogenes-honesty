package it.unica.co2.examples.plugin;



import static it.unica.co2.model.ContractFactory.*;
import it.unica.co2.api.Session2;
import it.unica.co2.model.contract.Contract;
import it.unica.co2.model.contract.ContractWrapper;
import it.unica.co2.model.contract.Recursion;
import it.unica.co2.model.contract.Sort;
import it.unica.co2.model.process.CO2Process;
import it.unica.co2.model.process.Participant;
import co2api.ContractException;
import co2api.Message;
import co2api.Public;
import co2api.TST;
import co2api.TimeExpiredException;

/*
 * auto-generated by co2-plugin
 * creation date: 03-09-2015 16:00:11
 */

@SuppressWarnings("unused")
public class Blackjack {
	
	private static String username = "test@co2-plugin.com";
	private static String password = "test";
	
	
	/*
	 * contracts declaration
	 */
	private static ContractWrapper Cp = wrapper();
	private static Recursion rec_Cp_Z_0 = recursion();
	private static ContractWrapper Cd = wrapper();
	private static Recursion rec_Cd_Z_0 = recursion();
	
	/*
	 * contracts initialization
	 */
	static {
		Cp.setContract(externalSum().add("hit", Sort.UNIT, internalSum().add("card", Sort.INT, rec_Cp_Z_0).add("lose", Sort.UNIT).add("abort", Sort.UNIT)).add("stand", Sort.UNIT, internalSum().add("win", Sort.UNIT).add("lose", Sort.UNIT).add("abort", Sort.UNIT)));
		rec_Cp_Z_0.setContract(externalSum().add("hit", Sort.UNIT, internalSum().add("card", Sort.INT, rec_Cp_Z_0).add("lose", Sort.UNIT).add("abort", Sort.UNIT)).add("stand", Sort.UNIT, internalSum().add("win", Sort.UNIT).add("lose", Sort.UNIT).add("abort", Sort.UNIT)));
		Cd.setContract(internalSum().add("next", Sort.UNIT, externalSum().add("card", Sort.INT, rec_Cd_Z_0)).add("abort", Sort.UNIT));
		rec_Cd_Z_0.setContract(internalSum().add("next", Sort.UNIT, externalSum().add("card", Sort.INT, rec_Cd_Z_0)).add("abort", Sort.UNIT));
	}
	
	public static class P extends Participant {
		
		private static final long serialVersionUID = 1L;
		
		public P() {
			super(username, password);
		}
		
		@Override
		public void run() {
			Session2<TST> xd;
			Session2<TST> xp;
			
			Public<TST> _pbl_xd_Cd = tell(Cd);
			xd = waitForSession(_pbl_xd_Cd);
			
			Public<TST> _pbl_xp_Cp = tell(Cp);
			
			try {
				xp = waitForSession(_pbl_xp_Cp, 10000);
				new Pplay(xp,xd,0).run();
			}
			catch(TimeExpiredException e) {
				xd.send("abort");
				xp = waitForSession(_pbl_xp_Cp);
				new PabortP(xp).run();
			}
		}
	}
	
	public static class Pplay extends Participant {
		
		private static final long serialVersionUID = 1L;
		private Session2<TST> xp;
		private Session2<TST> xd;
		private Integer np;
		
		public Pplay(Session2<TST> xp,Session2<TST> xd,Integer np) {
			super(username, password);
			this.xp=xp;
			this.xd=xd;
			this.np=np;
		}
		
		@Override
		public void run() {
			
			try {
				
				logger.log("waiting on 'xp' for actions [hit,stand]");
				Message _msg_xp_0 = xp.waitForReceive(10000, "hit","stand");
					
				switch (_msg_xp_0.getLabel()) {
					
					case "hit":
						xd.send("next");
						new Pdeck(xp,xd,np).run();
						break;
					case "stand":
						new Qstand(xp,xd,np,0).run();
						break;
					
					default:
						throw new IllegalStateException("You should not be here");
				}
				
			}
			catch (TimeExpiredException e) {
				xd.send("abort");
				new PabortP(xp).run();
			}
			
		}
	}
	
	public static class Pdeck extends Participant {
		
		private static final long serialVersionUID = 1L;
		private Session2<TST> xp;
		private Session2<TST> xd;
		private Integer np;
		
		public Pdeck(Session2<TST> xp,Session2<TST> xd,Integer np) {
			super(username, password);
			this.xp=xp;
			this.xd=xd;
			this.np=np;
		}
		
		@Override
		public void run() {
			
			try {
				
				logger.log("waiting on 'xd' for actions [card]");
				Message _msg_xd_1 = xd.waitForReceive(10000, "card");
					
				switch (_msg_xd_1.getLabel()) {
					
					case "card":
						Integer n_0;
						try {
							n_0 = Integer.parseInt(_msg_xd_1.getStringValue());
						}
						catch (NumberFormatException | ContractException e) {
							throw new RuntimeException(e);
						}
						new Pcard(xp,xd,(np+n_0),n_0).run();
						break;
					
					default:
						throw new IllegalStateException("You should not be here");
				}
				
			}
			catch (TimeExpiredException e) {
				xp.send("abort");
				new PabortD(xd).run();
			}
			
		}
	}
	
	public static class Pcard extends Participant {
		
		private static final long serialVersionUID = 1L;
		private Session2<TST> xp;
		private Session2<TST> xd;
		private Integer np;
		private Integer n;
		
		public Pcard(Session2<TST> xp,Session2<TST> xd,Integer np,Integer n) {
			super(username, password);
			this.xp=xp;
			this.xd=xd;
			this.np=np;
			this.n=n;
		}
		
		@Override
		public void run() {
			
			if ((np<21)) {
				xp.send("card", n);
				new Pplay(xp,xd,np).run();
			}
			else {
				xp.send("lose");
				new PabortD(xd).run();
			}
		}
	}
	
	public static class Qstand extends Participant {
		
		private static final long serialVersionUID = 1L;
		private Session2<TST> xp;
		private Session2<TST> xd;
		private Integer np;
		private Integer nd;
		
		public Qstand(Session2<TST> xp,Session2<TST> xd,Integer np,Integer nd) {
			super(username, password);
			this.xp=xp;
			this.xd=xd;
			this.np=np;
			this.nd=nd;
		}
		
		@Override
		public void run() {
			
			if ((nd<21)) {
				xd.send("next");
				new Qdeck(xp,xd,np,nd).run();
			}
			else {
				xp.send("win");
				xd.send("abort");
			}
		}
	}
	
	public static class Qdeck extends Participant {
		
		private static final long serialVersionUID = 1L;
		private Session2<TST> xp;
		private Session2<TST> xd;
		private Integer np;
		private Integer nd;
		
		public Qdeck(Session2<TST> xp,Session2<TST> xd,Integer np,Integer nd) {
			super(username, password);
			this.xp=xp;
			this.xd=xd;
			this.np=np;
			this.nd=nd;
		}
		
		@Override
		public void run() {
			
			try {
				
				logger.log("waiting on 'xd' for actions [card]");
				Message _msg_xd_2 = xd.waitForReceive(10000, "card");
					
				switch (_msg_xd_2.getLabel()) {
					
					case "card":
						Integer n_0;
						try {
							n_0 = Integer.parseInt(_msg_xd_2.getStringValue());
						}
						catch (NumberFormatException | ContractException e) {
							throw new RuntimeException(e);
						}
						new Qcard(xp,xd,np,nd).run();
						break;
					
					default:
						throw new IllegalStateException("You should not be here");
				}
				
			}
			catch (TimeExpiredException e) {
				xp.send("abort");
				new PabortD(xd).run();
			}
			
		}
	}
	
	public static class Qcard extends Participant {
		
		private static final long serialVersionUID = 1L;
		private Session2<TST> xp;
		private Session2<TST> xd;
		private Integer np;
		private Integer nd;
		
		public Qcard(Session2<TST> xp,Session2<TST> xd,Integer np,Integer nd) {
			super(username, password);
			this.xp=xp;
			this.xd=xd;
			this.np=np;
			this.nd=nd;
		}
		
		@Override
		public void run() {
			
			if ((nd<np)) {
				new Qstand(xp,xd,np,nd).run();
			}
			else {
				xp.send("lose");
				new PabortD(xd).run();
			}
		}
	}
	
	public static class PabortP extends Participant {
		
		private static final long serialVersionUID = 1L;
		private Session2<TST> xp;
		
		public PabortP(Session2<TST> xp) {
			super(username, password);
			this.xp=xp;
		}
		
		@Override
		public void run() {
			
			
			logger.log("waiting on 'xp' for actions [hit,stand]");
			Message _msg_xp_3 = xp.waitForReceive("hit","stand");
				
			switch (_msg_xp_3.getLabel()) {
				
				case "hit":
					xp.send("abort");
					break;
				case "stand":
					xp.send("abort");
					break;
				
				default:
					throw new IllegalStateException("You should not be here");
			}
			
		}
	}
	
	public static class PabortD extends Participant {
		
		private static final long serialVersionUID = 1L;
		private Session2<TST> xd;
		
		public PabortD(Session2<TST> xd) {
			super(username, password);
			this.xd=xd;
		}
		
		@Override
		public void run() {
			
			parallel(()->{
				
				xd.send("abort");
			});
			
			parallel(()->{
				
				
				logger.log("waiting on 'xd' for actions [card]");
				Message _msg_xd_4 = xd.waitForReceive("card");
					
				switch (_msg_xd_4.getLabel()) {
					
					case "card":
						Integer n_0;
						try {
							n_0 = Integer.parseInt(_msg_xd_4.getStringValue());
						}
						catch (NumberFormatException | ContractException e) {
							throw new RuntimeException(e);
						}
						xd.send("abort");
						break;
					
					default:
						throw new IllegalStateException("You should not be here");
				}
				
			});
		}
	}
	
	public static void main(String[] args) {
		new P().run();
	}
}

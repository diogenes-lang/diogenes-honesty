package it.unica.co2.examples.plugin;

import static it.unica.co2.api.contract.newapi.ContractFactory.*;


import co2api.ContractException;
import co2api.Message;
import co2api.Public;
import co2api.TST;
import it.unica.co2.api.Session2;
import it.unica.co2.api.contract.newapi.ContractDefinition;
import it.unica.co2.api.contract.newapi.Recursion;
import it.unica.co2.api.contract.newapi.Sort;
import it.unica.co2.api.process.Participant;
import it.unica.co2.honesty.HonestyChecker;

/*
 * auto-generated by co2-plugin
 * creation date: 04-09-2015 11:40:02
 */

@SuppressWarnings("unused")
public class OnlineStore {
	
	private static String username = "test@co2-plugin.com";
	private static String password = "test";
	
	
	/*
	 * contracts declaration
	 */
	private static ContractDefinition C = def("C");
	private static Recursion rec_C_Z_0 = recursion("x");//wrapper("rec_C_Z_0");
	private static ContractDefinition Cpay = def("Cpay");
	private static Recursion rec_Cpay_Y_0 = recursion("x");//wrapper("rec_Cpay_Y_0");
	
	/*
	 * contracts initialization
	 */
	static {
		C.setContract(externalSum().add("addToCart", Sort.INT, rec_C_Z_0));
		rec_C_Z_0.setContract(externalSum().add("addToCart", Sort.INT, rec_C_Z_0).add("checkout", Sort.UNIT, ref(Cpay)));
		Cpay.setContract(rec_Cpay_Y_0);
		rec_Cpay_Y_0.setContract(externalSum().add("pay", Sort.STRING, internalSum().add("ok", Sort.UNIT).add("no", Sort.UNIT, rec_Cpay_Y_0).add("abort", Sort.UNIT)).add("cancel", Sort.UNIT));
	}
	
	public static class P extends Participant {
		
		private static final long serialVersionUID = 1L;
		
		public P() {
			super(username, password);
		}
		
		@Override
		public void run() {
			Public<TST> pbl$x$C = tell(C.getContract());
			Session2<TST> x = waitForSession(pbl$x$C);
			
			logger.log("waiting on 'x' for actions [addToCart]");
			Message msg$0 = x.waitForReceive("addToCart");
			
			logger.log("received [addToCart]");
			Integer n$addToCart$msg1;
			try {
				n$addToCart$msg1 = Integer.parseInt(msg$0.getStringValue());
			}
			catch (NumberFormatException | ContractException e) {
				throw new RuntimeException(e);
			}
			new Padd(x,n$addToCart$msg1).run();
		}
	}
	
	public static class Padd extends Participant {
		
		private static final long serialVersionUID = 1L;
		private Session2<TST> x;
		private Integer total;
		
		public Padd(Session2<TST> x,Integer total) {
			super(username, password);
			this.x=x;
			this.total=total;
		}
		
		@Override
		public void run() {
			logger.log("waiting on 'x' for actions [addToCart,checkout]");
			Message msg$0 = x.waitForReceive("addToCart","checkout");
			
			switch (msg$0.getLabel()) {			
				
				case "addToCart":
					logger.log("received [addToCart]");
					Integer n$addToCart$msg1;
					try {
						n$addToCart$msg1 = Integer.parseInt(msg$0.getStringValue());
					}
					catch (NumberFormatException | ContractException e) {
						throw new RuntimeException(e);
					}
					new Padd(x,(total+n$addToCart$msg1)).run();
					break;
				
				case "checkout":
					logger.log("received [checkout]");
					new Ppay(x,total).run();
					break;
				
				default:
					throw new IllegalStateException("You should not be here");
			}
		}
	}
	
	public static class Ppay extends Participant {
		
		private static final long serialVersionUID = 1L;
		private Session2<TST> x;
		private Integer amount;
		
		public Ppay(Session2<TST> x,Integer amount) {
			super(username, password);
			this.x=x;
			this.amount=amount;
		}
		
		@Override
		public void run() {
			logger.log("waiting on 'x' for actions [pay,cancel]");
			Message msg$0 = x.waitForReceive("pay","cancel");
			
			switch (msg$0.getLabel()) {			
				
				case "pay":
					logger.log("received [pay]");
					String s$pay$msg1;
					try {
						s$pay$msg1 = msg$0.getStringValue();
					}
					catch (ContractException e) {
						throw new RuntimeException(e);
					}
					new Pack(x,amount).run();
					break;
				
				case "cancel":
					logger.log("received [cancel]");
					break;
				
				default:
					throw new IllegalStateException("You should not be here");
			}
		}
	}
	
	public static class Pack extends Participant {
		
		private static final long serialVersionUID = 1L;
		private Session2<TST> x;
		private Integer amount;
		
		public Pack(Session2<TST> x,Integer amount) {
			super(username, password);
			this.x=x;
			this.amount=amount;
		}
		
		@Override
		public void run() {
			if ((amount<100)) {
				x.send("ok");
			}
			else {
				x.send("no");
				new Ppay(x,amount).run();
			}
		}
	}
	
	public static void main(String[] args) {
//		new P().run();
		HonestyChecker.isHonest(P.class);
	}
}

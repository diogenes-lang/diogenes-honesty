package it.unica.co2.examples.plugin;



import static it.unica.co2.model.ContractFactory.*;
import it.unica.co2.api.Session2;
import it.unica.co2.model.contract.Contract;
import it.unica.co2.model.contract.ContractWrapper;
import it.unica.co2.model.contract.Recursion;
import it.unica.co2.model.contract.Sort;
import it.unica.co2.model.process.CO2Process;
import it.unica.co2.model.process.Participant;
import co2api.ContractException;
import co2api.Message;
import co2api.Public;
import co2api.TST;
import co2api.TimeExpiredException;

/*
 * auto-generated by co2-plugin
 * creation date: 03-09-2015 16:07:46
 */

@SuppressWarnings("unused")
public class Store {
	
	private static String username = "test@co2-plugin.com";
	private static String password = "test";
	
	
	/*
	 * contracts declaration
	 */
	private static ContractWrapper C = wrapper();
	private static Recursion rec_C_Z_0 = recursion();
	private static ContractWrapper Cpay = wrapper();
	private static Recursion rec_Cpay_Y_0 = recursion();
	
	/*
	 * contracts initialization
	 */
	static {
		C.setContract(externalSum().add("addToCart", Sort.INT, rec_C_Z_0));
		rec_C_Z_0.setContract(externalSum().add("addToCart", Sort.INT, rec_C_Z_0).add("checkout", Sort.UNIT, Cpay));
		Cpay.setContract(rec_Cpay_Y_0);
		rec_Cpay_Y_0.setContract(externalSum().add("pay", Sort.STRING, internalSum().add("ok", Sort.UNIT).add("no", Sort.UNIT, rec_Cpay_Y_0).add("abort", Sort.UNIT)).add("cancel", Sort.UNIT));
	}
	
	public static class P extends Participant {
		
		private static final long serialVersionUID = 1L;
		
		public P() {
			super(username, password);
		}
		
		@Override
		public void run() {
			Session2<TST> x;
			
			
			Public<TST> _pbl_x_C = tell(C);
			x = waitForSession(_pbl_x_C);
			
			
			logger.log("waiting on 'x' for actions [addToCart]");
			Message _msg_x_0 = x.waitForReceive("addToCart");
				
			switch (_msg_x_0.getLabel()) {
				
				case "addToCart":
					Integer n_0;
					try {
						n_0 = Integer.parseInt(_msg_x_0.getStringValue());
					}
					catch (NumberFormatException | ContractException e) {
						throw new RuntimeException(e);
					}
					new Padd(x,n_0).run();
					break;
				
				default:
					throw new IllegalStateException("You should not be here");
			}
			
		}
	}
	
	public static class Padd extends Participant {
		
		private static final long serialVersionUID = 1L;
		private Session2<TST> x;
		private Integer total;
		
		public Padd(Session2<TST> x,Integer total) {
			super(username, password);
			this.x=x;
			this.total=total;
		}
		
		@Override
		public void run() {
			
			
			logger.log("waiting on 'x' for actions [addToCart,checkout]");
			Message _msg_x_1 = x.waitForReceive("addToCart","checkout");
				
			switch (_msg_x_1.getLabel()) {
				
				case "addToCart":
					Integer n_0;
					try {
						n_0 = Integer.parseInt(_msg_x_1.getStringValue());
					}
					catch (NumberFormatException | ContractException e) {
						throw new RuntimeException(e);
					}
					new Padd(x,(total+n_0)).run();
					break;
				case "checkout":
					new Ppay(x,total).run();
					break;
				
				default:
					throw new IllegalStateException("You should not be here");
			}
			
		}
	}
	
	public static class Ppay extends Participant {
		
		private static final long serialVersionUID = 1L;
		private Session2<TST> x;
		private Integer amount;
		
		public Ppay(Session2<TST> x,Integer amount) {
			super(username, password);
			this.x=x;
			this.amount=amount;
		}
		
		@Override
		public void run() {
			
			
			logger.log("waiting on 'x' for actions [pay,cancel]");
			Message _msg_x_2 = x.waitForReceive("pay","cancel");
				
			switch (_msg_x_2.getLabel()) {
				
				case "pay":
					String s_0;
					try {
						s_0 = _msg_x_2.getStringValue();
					}
					catch (ContractException e) {
						throw new RuntimeException(e);
					}
					new Pack(x,amount).run();
					break;
				case "cancel":
					break;
				
				default:
					throw new IllegalStateException("You should not be here");
			}
			
		}
	}
	
	public static class Pack extends Participant {
		
		private static final long serialVersionUID = 1L;
		private Session2<TST> x;
		private Integer amount;
		
		public Pack(Session2<TST> x,Integer amount) {
			super(username, password);
			this.x=x;
			this.amount=amount;
		}
		
		@Override
		public void run() {
			
			if ((amount<100)) {
				x.send("ok");
			}
			else {
				x.send("no");
				new Ppay(x,amount).run();
			}
		}
	}
	
	public static void main(String[] args) {
		new P().run();
	}
}
